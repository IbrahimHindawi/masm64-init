;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;                                                                                                                                    
;           Arithmetic                                                                                                               
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;                                                                                                                                    
;           Module that contains Arithmetic                                                                                          
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ifndef arith_asm                                                                    ; header guard
                                                arith_asm = 0                                                                       ; header guard variable
.const
.data
x                                               qword                                           ?
y                                               qword                                           ?
.code
arith                                           proc
                                                mov                                             x, 100
                                                mov                                             y, 50
                                                mov                                             rax, x
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; add dest, source
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                add                                             rax, y
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; sub dest, source
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                sub                                             rax, x
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; inc dest
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                inc                                             rax
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; dec dest
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                dec                                             rax
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; neg dest
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                neg                                             rax
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; unsigned multiplication:
                                                ; mul multiplier (rax: multiplicand) -> rdx:rax
                                                ;                                       |   └-----> lower half
                                                ;                                       └-----> upper half
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                mov                                             rax, 100
                                                mov                                             rcx, 100
                                                mul                                             rcx
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; unsigned division:
                                                ; div divisor (rax dividend) -> rdx:rax
                                                ;                               |   └-----> result
                                                ;                               └-----> remainder
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                mov                                             rax, 8
                                                mov                                             rcx, 2
                                                div                                             rcx
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; signed multiplication:
                                                ; imul multiplier (rax: multiplicand) -> rdx:rax
                                                ;                                        |   └-----> lower half
                                                ;                                        └-----> upper half
                                                ; imul multiplier (reg/mem/imm)
                                                ; imul multiplicand, multiplier
                                                ; imul destination, multiplicand, multiplier (imm)
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                mov                                             rax, 100
                                                mov                                             rcx, 100
                                                imul                                            rcx
                                                imul                                            rax, rcx
                                                imul                                            rdx, rax, 8
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; signed division:
                                                ; idiv divisor (rax: dividend) -> rdx:rax
                                                ;                                 |   └-----> quotient
                                                ;                                 └-----> remainder 
                                                ;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                xor                                             rdx, rdx
                                                mov                                             rax, 100
                                                mov                                             rcx, 2
                                                idiv                                            rcx
                                                ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; extending sign:
                                                ; either `mov rdx, -1` to negate the entire reg
                                                ; or use these instructions:
                                                ; cbw byte to word extension
                                                ; cwd word to dword extension
                                                ; cdq dword to qword extension
                                                ; cqo qword to octoword extension
                                                ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; sign extension examples here...
                                                ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; logical operators
                                                ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                xor                                             rcx, rcx 
                                                xor                                             rdx, rdx 
                                                mov                                             rcx, 0101b 
                                                mov                                             rdx, 0011b 
                                                xor                                             rcx, rdx 
                                                and                                             rcx, rdx 
                                                or                                              rcx, rdx
                                                ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; shift left, right
                                                ; shl shr
                                                ; shift arithmetic left, right preserves sign
                                                ; sal sar
                                                ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; shifting examples here...
                                                ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; rotating rotates the register's bits so that they dont
                                                ; fall off the other side: 10100 rol 01001
                                                ; rotate left, right
                                                ; rol ror
                                                ; rotate carry left, right includes carry flag
                                                ; rcl rcr
                                                ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ; rotating examples here...
                                                ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                ret
arith                                           endp
                                                endif
